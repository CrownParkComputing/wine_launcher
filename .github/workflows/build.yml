name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - distro: ubuntu:22.04
            package: deb
          - distro: fedora:39
            package: rpm
          - distro: archlinux:base-devel
            package: pkg.tar.zst

    container:
      image: ${{ matrix.distro }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          if [ "${{ matrix.distro }}" = "ubuntu:22.04" ]; then
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
              curl git cmake ninja-build clang pkg-config libgtk-3-dev dpkg-dev \
              xz-utils jq unzip zip
          elif [ "${{ matrix.distro }}" = "fedora:39" ]; then
            # First install minimal required packages
            dnf clean all
            dnf makecache
            dnf install -y --setopt=install_weak_deps=False \
              curl git jq unzip zip findutils which xz

            # Then install development packages one by one to avoid dependency issues
            dnf install -y --setopt=install_weak_deps=False cmake
            dnf install -y --setopt=install_weak_deps=False ninja-build
            dnf install -y --setopt=install_weak_deps=False clang
            dnf install -y --setopt=install_weak_deps=False pkg-config
            dnf install -y --setopt=install_weak_deps=False gtk3-devel
            dnf install -y --setopt=install_weak_deps=False rpm-build
          else
            pacman -Syu --noconfirm
            pacman -S --noconfirm --needed \
              curl git cmake ninja clang pkg-config gtk3 base-devel xz jq unzip zip
          fi

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          
      - name: Install Flutter dependencies
        run: |
          flutter config --no-analytics
          flutter doctor -v
          flutter pub get
        
      - name: Build Linux
        run: flutter build linux --release

      - name: Package Application
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | cut -d' ' -f2)
          if [ "${{ matrix.package }}" = "deb" ]; then
            # Create DEB package
            mkdir -p debian/DEBIAN
            mkdir -p debian/usr/bin/wine-launcher
            mkdir -p debian/usr/share/applications
            
            # Copy application files
            cp -r build/linux/x64/release/bundle/* debian/usr/bin/wine-launcher/
            
            # Create desktop entry
            cat > debian/usr/share/applications/wine-launcher.desktop << EOF
            [Desktop Entry]
            Name=Wine Launcher
            Exec=/usr/bin/wine-launcher/wine_launcher
            Icon=/usr/bin/wine-launcher/data/flutter_assets/assets/icon.png
            Type=Application
            Categories=Game;Utility;
            EOF
            
            # Create control file
            cat > debian/DEBIAN/control << EOF
            Package: wine-launcher
            Version: ${VERSION}
            Section: games
            Priority: optional
            Architecture: amd64
            Depends: wine, winetricks
            Maintainer: Your Name <your.email@example.com>
            Description: Wine and Proton prefix manager for Linux
             A modern GUI application to manage Wine and Proton prefixes,
             launch Windows games and applications.
            EOF
            
            # Build package
            dpkg-deb --build debian wine-launcher_${VERSION}_amd64.deb
            
          elif [ "${{ matrix.package }}" = "rpm" ]; then
            # Create RPM spec file
            cat > wine-launcher.spec << EOF
            Name: wine-launcher
            Version: ${VERSION}
            Release: 1
            Summary: Wine and Proton prefix manager for Linux
            License: MIT
            Requires: wine winetricks
            
            %description
            A modern GUI application to manage Wine and Proton prefixes,
            launch Windows games and applications.
            
            %install
            mkdir -p %{buildroot}/usr/bin/wine-launcher
            mkdir -p %{buildroot}/usr/share/applications
            cp -r build/linux/x64/release/bundle/* %{buildroot}/usr/bin/wine-launcher/
            
            cat > %{buildroot}/usr/share/applications/wine-launcher.desktop << EOL
            [Desktop Entry]
            Name=Wine Launcher
            Exec=/usr/bin/wine-launcher/wine_launcher
            Icon=/usr/bin/wine-launcher/data/flutter_assets/assets/icon.png
            Type=Application
            Categories=Game;Utility;
            EOL
            
            %files
            /usr/bin/wine-launcher
            /usr/share/applications/wine-launcher.desktop
            EOF
            
            # Build RPM
            rpmbuild -bb wine-launcher.spec
            
          else
            # Create PKGBUILD
            cat > PKGBUILD << EOF
            pkgname=wine-launcher
            pkgver=${VERSION}
            pkgrel=1
            pkgdesc="Wine and Proton prefix manager for Linux"
            arch=('x86_64')
            depends=('wine' 'winetricks')
            
            package() {
              mkdir -p "\${pkgdir}/usr/bin/wine-launcher"
              mkdir -p "\${pkgdir}/usr/share/applications"
              cp -r build/linux/x64/release/bundle/* "\${pkgdir}/usr/bin/wine-launcher/"
              
              cat > "\${pkgdir}/usr/share/applications/wine-launcher.desktop" << EOL
            [Desktop Entry]
            Name=Wine Launcher
            Exec=/usr/bin/wine-launcher/wine_launcher
            Icon=/usr/bin/wine-launcher/data/flutter_assets/assets/icon.png
            Type=Application
            Categories=Game;Utility;
            EOL
            }
            EOF
            
            # Build package
            makepkg -si --noconfirm
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wine-launcher-${{ matrix.package }}
          path: |
            *.deb
            *.rpm
            *.pkg.tar.zst

  create-release:
    needs: build-linux
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/download-artifact@v4
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            wine-launcher-deb/*.deb
            wine-launcher-rpm/*.rpm
            wine-launcher-pkg.tar.zst/*.pkg.tar.zst
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 